Задачи (начальные):

1) Реализация связанного списка. Класс, который инкапсулирует список, содержит корневую ноду, а также набор методов для работы со списком (поиск, вставка, удаление, и т.д.).
Нода списка может содержать данные классов (в качестве примера сделать три таких класса), 
которые бы наследовались от абстрактного класса DataNode,
который в свою очередь содержит абстрактный метод print() - вывод на печать данных в json виде. 
Класс списка должен содержать метод saveToFile(String path) - сохранение файла в виде json по указанному пути.
Правило нейминга для вывода - такое же как в классе, camel case.
Предусмотреть возможность хранения подсписков, т.е. в качестве ноды может быть список.
Методы списка покрыть тестами.

Задача проверяет навыки:
- ООП (абстрактные классы, наследование)
- Понимание структуры данных "Список"
- Работа с ФС из java
- Понимание формата json и умение работать с ним с помощью библиотеки Jackson
- Знакомит с патернами проектирования, в частности использования паттерна "Компановщик"
- Написание юнит тестов

2) Реализация бинарного дерева поиска. Нода дерева - одна из дочек класса TreeNode, который в свою очередь содержит поля Long id и Long subId,
по этим полям строится дерево (рекомендуется реализация интерфейса Comparable). 
Также в родительском классе должно быть поле String className, которое отражает каким дочерним классом эл-т является. 
Если класс не известен, то выбрасывать исключение и не добавлять эл-т.  
Остальные поля ноды могут быть любыми. Класс реализации дерева содержит корень дерева, а также набор методов по взаимодействию
с деревом (поиск, вставка, удаление, и т.д.).
В случае отсутствия значений в полях id и subId, кидать исключение и не добавлять эл-т. 
Выброс исключения не должен приводить к краху программы, должно только выводится в лог сообщение об ошибке,
а добавление корректных эл-тов продолжается.
Ввод данных в программу осуществляется передачи в качестве аргумента пути до ф-ла в формате json, где в виде массива лежат данные.
Правило нейминга - snake case.
Написать юнит тесты на методы.

Задача проверяет навыки:
- ООП (наследование класса, реализация интерфейса)
- Понимание структуры данных "Бинарное дерево поиска"
- Обработка исключений
- Работа с ФС из java
- Понимание формата json и умение работать с ним с помощью библиотеки Jackson
- Написание юнит тестов

3) Написать программу по конвертации данных из xml формата в json формат (нейминг любой из прошлых задач). 
Данные на вход поступают из файла в формате xml, путь которого передается в аргументе. 
Каталог для выходного файла также поступает в аргументе. Данные, которые поступают на вход, должны соответствовать приложенным XSD. 
В случае несоответствия - исключение, программа прерывается.
Написать юнит тест на разработанный функционал.

Задача проверяет навыки:
- Обработка исключений
- Работа с ФС из java
- Понимание формата json и умение работать с ним с помощью библиотеки Jackson
- Понимание форматов xml и xsd, умение работать с ними, умение получить pojo (plain old java object)
- Написание юнит тестов
   

Задачи (Spring + продолжение):
 
1) Рест сервис хранения обращений граждан. Разработать рест сервис, который будет реализовывать методы:

GET /citizens - получение информации обо всех имеющихся в хранилище гражданах по параметрам запроса.
Параметры запроса:
 - last_name - не обязательный параметр;
 - first_name - не обязательный параметр;
 - middle_name - не обязательный параметр;
 - birth_date - не обязательный параметр;
 
Успех - 200 и массив данных о гражданах;
Не найдено - 404 и сообщение об ошибке;
Ошибка сервера - 500 и сообщение об ошибке;

GET /citizens/{id} - получение информации о конкретном гражданине.
Успех - 200 и данные о гражданине;
Не найдено - 404 и сообщение об ошибке;
Ошибка сервера - 500 и сообщение об ошибке;

POST /citizens - добавление нового гражданина, предролагает тело запроса в json формате.
Валидация тела, проверка на ограничения, сохранение сущности.
Успех - 201 и сообщение с идентификатором гражданина в бд;
Ошибка чтения тела запроса - 422 и сообщение об ошибке;
Ошибка валидации - 400 и список полей с ошибкой валидации;
Ошибка сервера - 500 и сообщение об ошибке;


PUT /citizens/{id} - изменение данных о конкретном гражданине, предполагает тело запроса в json формате.
Валидация тела, проверка на ограничения, изменение сущности.
Успех - 200 и сообщение с идентификатором гражданина в бд;
Ошибка чтения тела запроса - 422 и сообщение об ошибке;
Ошибка валидации - 400 и список полей с ошибкой валидации;
Ошибка отсутствия изменяемой сущности - 404 и сообщение об ошибке; 
Ошибка сервера - 500 и сообщение об ошибке;

DELETE /citizens/{id} - удаление данных о конкретном гражданине, предролагает тело запроса в json формате.
Успех - 204;
Ошибка отсутствия удаляемой сущности - 404 и сообщение об ошибке; 
Ошибка сервера - 500 и сообщение об ошибке;

Предполагаемый формат тела запроса:
- last_name - фамилия, не может быть пустым
- first_name - имя, не может быть пустым
- middle_name - отчество
- birth_date - дата рождения в формате dd.MM.yyyy
- phone - контактный телефон в формате +7(XXX)XXX-XX-XX, не может быть пустым
- extra_phone - дополнительный номер телефона в формате +7(XXX)XXX-XX-XX
- dul_serie - серия паспорта, допускаются 4 цифры, не может быть пустым
- dul_number - номер паспорта, допускаются 6 цифр, не может быть пустым

Дополнительные ограничения: 
- Гражданину должно быть полных 18 лет.
- Гражданин с именем, фамилией, отчеством и датой рождения должен в бд быть только один. Реализовать проверку на уровне приложения.

Данные о гражданине хранить в бд postgresql.
Разработать сваггер.
Использовать актуатор.

Задача проверяет навыки:
- Spring, DI, написание рест контроллеров
- Spring DATA JPA
- HTTP, REST
- JSON
- Swagger
- Spring Actuator
- Обработка исключений
- Spring Bean Validation

